// <auto-generated />
using System;
using E_Commerce.DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250903113903_InitialDB")]
    partial class InitialDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f5acff3-66a2-4269-8365-6fa7934a3057",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            Id = "af475d6a-607b-43d2-b820-3545ea766b2f",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b59155e-bd84-4b84-ba76-3abfa6bcc1e0",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a85c49fc-6f4a-49a3-8e23-f85f335ceb3b",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            Id = "ae6b246e-e7d2-4ae4-84c3-ecda1bca4b91",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acf12de1-fd74-423b-ae9a-6d80b8dad069",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7579043-44b2-4284-80d1-e8521b9817e7",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            Id = "5573320b-350d-45fc-b53a-36de9e21509c",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aac1d4fc-1366-45f9-8e3b-76963462f89a",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa7531ff-772c-4311-ae8d-95735038da66",
                            EmailConfirmed = false,
                            FirstName = "Diana",
                            Id = "8607d9ac-74f8-44a5-a774-a2b744a1dfe0",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d83cddb-28d9-4273-87d3-40f01c597a68",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42a83499-d676-46c6-8c5c-4fbc98f7ec48",
                            EmailConfirmed = false,
                            FirstName = "Ethan",
                            Id = "1420db61-280b-4f3e-8815-f6c0204e16fc",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91505eb9-7c68-4ad6-8e37-7289342d3196",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartItemId = 1,
                            CartId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            CartItemId = 2,
                            CartId = 2,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            CartItemId = 3,
                            CartId = 3,
                            ProductId = 3,
                            Quantity = 3
                        },
                        new
                        {
                            CartItemId = 4,
                            CartId = 4,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            CartItemId = 5,
                            CartId = 5,
                            ProductId = 5,
                            Quantity = 4
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Prefix = "Electronic devices",
                            Title = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Prefix = "Tech accessories",
                            Title = "Accessories"
                        },
                        new
                        {
                            CategoryId = 3,
                            Prefix = "Home and office furniture",
                            Title = "Furniture"
                        },
                        new
                        {
                            CategoryId = 4,
                            Prefix = "Educational and entertainment books",
                            Title = "Books"
                        },
                        new
                        {
                            CategoryId = 5,
                            Prefix = "Apparel and fashion",
                            Title = "Clothing"
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 250m,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderDate = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalAmount = 120m,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 3,
                            OrderDate = new DateTime(2025, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Shipped",
                            TotalAmount = 350m,
                            UserId = 3
                        },
                        new
                        {
                            OrderId = 4,
                            OrderDate = new DateTime(2025, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            TotalAmount = 90m,
                            UserId = 4
                        },
                        new
                        {
                            OrderId = 5,
                            OrderDate = new DateTime(2025, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Processing",
                            TotalAmount = 500m,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemId = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 2,
                            UnitPrice = 50m
                        },
                        new
                        {
                            OrderItemId = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1,
                            UnitPrice = 120m
                        },
                        new
                        {
                            OrderItemId = 3,
                            OrderId = 3,
                            ProductId = 3,
                            Quantity = 3,
                            UnitPrice = 100m
                        },
                        new
                        {
                            OrderItemId = 4,
                            OrderId = 4,
                            ProductId = 4,
                            Quantity = 1,
                            UnitPrice = 90m
                        },
                        new
                        {
                            OrderItemId = 5,
                            OrderId = 5,
                            ProductId = 5,
                            Quantity = 5,
                            UnitPrice = 100m
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Gaming laptop",
                            ImageUrl = "laptop.jpg",
                            Price = 1000m,
                            StockQuantity = 10,
                            Title = "Laptop"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Smartphone",
                            ImageUrl = "phone.jpg",
                            Price = 500m,
                            StockQuantity = 20,
                            Title = "Phone"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            Description = "Wireless headphones",
                            ImageUrl = "headphones.jpg",
                            Price = 150m,
                            StockQuantity = 50,
                            Title = "Headphones"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3,
                            Description = "Office chair",
                            ImageUrl = "chair.jpg",
                            Price = 200m,
                            StockQuantity = 30,
                            Title = "Chair"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            Description = "Wooden desk",
                            ImageUrl = "desk.jpg",
                            Price = 300m,
                            StockQuantity = 15,
                            Title = "Desk"
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Excellent product!",
                            ProductId = 1,
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Good value.",
                            ProductId = 2,
                            Rating = 4,
                            UserId = 2
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Average quality.",
                            ProductId = 3,
                            Rating = 3,
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 4,
                            Comment = "Very comfortable.",
                            ProductId = 4,
                            Rating = 5,
                            UserId = 4
                        },
                        new
                        {
                            ReviewId = 5,
                            Comment = "Well built desk.",
                            ProductId = 5,
                            Rating = 4,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.ShoppingCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            CartId = 1,
                            UserId = 1
                        },
                        new
                        {
                            CartId = 2,
                            UserId = 2
                        },
                        new
                        {
                            CartId = 3,
                            UserId = 3
                        },
                        new
                        {
                            CartId = 4,
                            UserId = 4
                        },
                        new
                        {
                            CartId = 5,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.CartItem", b =>
                {
                    b.HasOne("E_Commerce.DAL.Models.ShoppingCart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Order", b =>
                {
                    b.HasOne("E_Commerce.DAL.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.OrderItem", b =>
                {
                    b.HasOne("E_Commerce.DAL.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Product", b =>
                {
                    b.HasOne("E_Commerce.DAL.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Review", b =>
                {
                    b.HasOne("E_Commerce.DAL.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.DAL.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.ShoppingCart", b =>
                {
                    b.HasOne("E_Commerce.DAL.Models.ApplicationUser", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("E_Commerce.DAL.Models.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("E_Commerce.DAL.Models.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
